# action.yml
name: 'Helm Validation Service'
description: 'Performs helm lint and template validation on specified charts'

inputs:
  chart-path:
    description: 'Path to the Helm chart'
    required: true
  values-file:
    description: 'Path to values file (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.9.0'
      
    - name: Helm Lint
      shell: bash
      id: lint
      run: |
        echo "=== Starting Helm Chart Validation ==="
        echo "Validating chart at: ${{ inputs.chart-path }}"
        
        # Create temporary file for capturing output
        LINT_OUTPUT_FILE=$(mktemp)
        
        # Run helm lint and capture both stdout and stderr
        if [ -n "${{ inputs.values-file }}" ]; then
          helm lint ${{ inputs.chart-path }} -f ${{ inputs.values-file }} > "$LINT_OUTPUT_FILE" 2>&1
          LINT_EXIT_CODE=$?
        else
          helm lint ${{ inputs.chart-path }} > "$LINT_OUTPUT_FILE" 2>&1
          LINT_EXIT_CODE=$?
        fi
        
        # Read and display the output
        LINT_OUTPUT=$(cat "$LINT_OUTPUT_FILE")
        echo "$LINT_OUTPUT"
        
        # Save the output and status for PR comment
        echo "exit_code=$LINT_EXIT_CODE" >> $GITHUB_OUTPUT
        echo "lint_output<<EOF" >> $GITHUB_OUTPUT
        echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Clean up temporary file
        rm "$LINT_OUTPUT_FILE"
        
        echo "=== Basic Validation Completed ==="
        # Only exit with error after we've captured all output
        if [ $LINT_EXIT_CODE -ne 0 ]; then
          exit $LINT_EXIT_CODE
        fi

    - name: Generate Template Output for Changed Files
      if: github.event_name == 'pull_request'
      shell: bash
      id: template
      run: |
        # Previous template generation code remains the same...
        # (Keep the existing code for template generation)

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const lintExitCode = '${{ steps.lint.outputs.exit_code }}';
          const lintOutput = process.env.LINT_OUTPUT;
          
          let validationStatus = '‚úÖ Passed';
          let statusColor = 'green';
          
          if (lintExitCode !== '0') {
            validationStatus = '‚ùå Failed';
            statusColor = 'red';
          }
          
          const output = `## üîç Helm Template Validation Results
          
          ### Validation Status: ${validationStatus}
          
          ### Validation Details
          - Chart Path: \`${{ inputs.chart-path }}\`
          - Values File: ${('${{ inputs.values-file }}' || 'Using default values')}
          
          ### Lint Results
          <details><summary>Show Helm Lint Output ${lintExitCode !== '0' ? '(Contains Errors ‚ùå)' : ''}</summary>
          
          \`\`\`
          ${lintOutput}
          \`\`\`
          
          </details>
          
          ${process.env.TEMPLATE ? `
          ### Template Changes
          <details><summary>Show Changed Templates</summary>
          
          \`\`\`yaml
          ${process.env.TEMPLATE}
          \`\`\`
          
          </details>
          ` : ''}
          
          ${lintExitCode !== '0' ? `
          ### ‚ö†Ô∏è Action Required
          Please review the lint errors above and make necessary corrections to your Helm charts.
          Common issues to check:
          - YAML syntax errors
          - Missing required fields
          - Incorrect indentation
          - Invalid Kubernetes resource definitions
          ` : ''}
          
          > Note: This validation shows the lint results and any templates that were modified in this PR.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      env:
        TEMPLATE: ${{ steps.template.outputs.template }}
        LINT_OUTPUT: ${{ steps.lint.outputs.lint_output }}