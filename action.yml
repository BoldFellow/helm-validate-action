# action.yml
name: 'Helm Validation Service'
description: 'Performs helm lint and template validation on specified charts'

inputs:
  chart-path:
    description: 'Path to the Helm chart'
    required: true
  values-file:
    description: 'Path to values file (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.9.0'
      
    - name: Helm Lint and Template Validation
      shell: bash
      id: validation
      run: |
        echo "=== Starting Helm Validation ==="
        
        # Run helm lint
        if [ -n "${{ inputs.values-file }}" ]; then
          helm lint ${{ inputs.chart-path }} -f ${{ inputs.values-file }}
        else
          helm lint ${{ inputs.chart-path }}
        fi
        
        echo "=== Starting Template Validation ==="
        # Always run template validation and store output
        if [ -n "${{ inputs.values-file }}" ]; then
          TEMPLATE=$(helm template ${{ inputs.chart-path }} -f ${{ inputs.values-file }})
        else
          TEMPLATE=$(helm template ${{ inputs.chart-path }})
        fi
        
        # Save template output regardless of event type
        echo "template<<EOF" >> $GITHUB_OUTPUT
        echo "$TEMPLATE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "=== Validation Completed ==="

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const output = `## Helm Template Validation Results
          #### Chart Path: \`${{ inputs.chart-path }}\`
          
          <details><summary>Show Generated Kubernetes Manifests</summary>
          
          \`\`\`yaml
          ${process.env.TEMPLATE}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      env:
        TEMPLATE: ${{ steps.validation.outputs.template }}