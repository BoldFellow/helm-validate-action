# action.yml
name: 'Helm Validation Service'
description: 'Performs helm lint and template validation on specified charts'

inputs:
  chart-path:
    description: 'Path to the Helm chart'
    required: true
  values-file:
    description: 'Path to values file (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.9.0'
      
    - name: Helm Lint and Capture Output
      shell: bash
      id: lint
      run: |
        echo "=== Starting Helm Chart Validation ==="
        echo "Validating chart at: ${{ inputs.chart-path }}"
        
        # Run helm lint and capture all output
        if [ -n "${{ inputs.values-file }}" ]; then
          OUTPUT=$(helm lint ${{ inputs.chart-path }} -f ${{ inputs.values-file }} 2>&1) || true
        else
          OUTPUT=$(helm lint ${{ inputs.chart-path }} 2>&1) || true
        fi
        
        # Display output in logs
        echo "$OUTPUT"
        
        # Save output for PR comment
        echo "output<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Check if there were errors
        if echo "$OUTPUT" | grep -q "Error:"; then
          echo "has_errors=true" >> $GITHUB_OUTPUT
        else
          echo "has_errors=false" >> $GITHUB_OUTPUT
        fi
        
        echo "=== Validation Completed ==="

    - name: Generate Template Output for Changed Files
      if: github.event_name == 'pull_request'
      shell: bash
      id: template
      continue-on-error: true
      run: |
        # Fetch necessary git history
        git fetch origin ${{ github.base_ref }}
        
        # Get only yaml files that changed in templates directory
        changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep 'templates/.*\.yaml$' || true)
        
        if [ -n "$changed_files" ]; then
          echo "Changed template files detected:"
          echo "$changed_files"
          
          # Initialize template output
          TEMPLATE_OUTPUT="### Modified Templates:\n\n"
          
          # Generate complete template once
          if [ -n "${{ inputs.values-file }}" ]; then
            all_templates=$(helm template ${{ inputs.chart-path }} -f ${{ inputs.values-file }})
          else
            all_templates=$(helm template ${{ inputs.chart-path }})
          fi
          
          # Process each changed file
          for file in $changed_files; do
            filename=$(basename "$file")
            echo "Processing: $filename"
            
            TEMPLATE_OUTPUT+="üìÑ File: $file\n\n"
            
            # Extract the relevant template section for this file
            file_template=$(echo "$all_templates" | awk -v file="$filename" '
              /^# Source:.*'$filename'$/ {p=1; print; next}
              /^---*$/ {if(p) {print; p=0; next}}
              p {print}
            ')
            
            if [ -n "$file_template" ]; then
              TEMPLATE_OUTPUT+="$file_template\n\n---\n\n"
            fi
          done
          
          # Save template output
          echo "template<<EOF" >> $GITHUB_OUTPUT
          echo -e "$TEMPLATE_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "No template files were changed in this PR."
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const lintOutput = process.env.LINT_OUTPUT;
          const hasErrors = '${{ steps.lint.outputs.has_errors }}' === 'true';
          const templateOutput = process.env.TEMPLATE;
          
          const output = `## Helm Chart Validation Results

          ### Status: ${hasErrors ? '‚ùå Validation Failed' : '‚úÖ Validation Passed'}

          <details><summary>üìã Validation Output ${hasErrors ? '(Contains Errors)' : ''}</summary>

          \`\`\`
          ${lintOutput}
          \`\`\`

          </details>

          ${templateOutput ? `
          ### Generated Templates
          <details><summary>Show Modified Templates</summary>

          \`\`\`yaml
          ${templateOutput}
          \`\`\`

          </details>
          ` : ''}`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
          
          // If there were errors, fail the action after posting the comment
          if (hasErrors) {
            throw new Error('Helm validation failed. See PR comment for details.');
          }
      env:
        LINT_OUTPUT: ${{ steps.lint.outputs.output }}
        TEMPLATE: ${{ steps.template.outputs.template }}